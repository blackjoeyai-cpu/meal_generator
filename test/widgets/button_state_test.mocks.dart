// Mocks generated by Mockito 5.4.6 from annotations
// in meal_generator/test/widgets/button_state_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:meal_generator/models/models.dart' as _i7;
import 'package:meal_generator/providers/app_provider.dart' as _i3;
import 'package:meal_generator/providers/materials_provider.dart' as _i6;
import 'package:meal_generator/providers/meal_plans_provider.dart' as _i9;
import 'package:meal_generator/services/services.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:table_calendar/table_calendar.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeDateTime_0 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMaterialService_1 extends _i1.SmartFake
    implements _i2.MaterialService {
  _FakeMaterialService_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMealService_2 extends _i1.SmartFake implements _i2.MealService {
  _FakeMealService_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMealPlanService_3 extends _i1.SmartFake
    implements _i2.MealPlanService {
  _FakeMealPlanService_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMealGeneratorService_4 extends _i1.SmartFake
    implements _i2.MealGeneratorService {
  _FakeMealGeneratorService_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeSeedDataService_5 extends _i1.SmartFake
    implements _i2.SeedDataService {
  _FakeSeedDataService_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AppProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppProvider extends _i1.Mock implements _i3.AppProvider {
  MockAppProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  DateTime get selectedDate =>
      (super.noSuchMethod(
            Invocation.getter(#selectedDate),
            returnValue: _FakeDateTime_0(
              this,
              Invocation.getter(#selectedDate),
            ),
          )
          as DateTime);

  @override
  bool get isInitialized =>
      (super.noSuchMethod(Invocation.getter(#isInitialized), returnValue: false)
          as bool);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  _i2.MaterialService get materialService =>
      (super.noSuchMethod(
            Invocation.getter(#materialService),
            returnValue: _FakeMaterialService_1(
              this,
              Invocation.getter(#materialService),
            ),
          )
          as _i2.MaterialService);

  @override
  _i2.MealService get mealService =>
      (super.noSuchMethod(
            Invocation.getter(#mealService),
            returnValue: _FakeMealService_2(
              this,
              Invocation.getter(#mealService),
            ),
          )
          as _i2.MealService);

  @override
  _i2.MealPlanService get mealPlanService =>
      (super.noSuchMethod(
            Invocation.getter(#mealPlanService),
            returnValue: _FakeMealPlanService_3(
              this,
              Invocation.getter(#mealPlanService),
            ),
          )
          as _i2.MealPlanService);

  @override
  _i2.MealGeneratorService get mealGeneratorService =>
      (super.noSuchMethod(
            Invocation.getter(#mealGeneratorService),
            returnValue: _FakeMealGeneratorService_4(
              this,
              Invocation.getter(#mealGeneratorService),
            ),
          )
          as _i2.MealGeneratorService);

  @override
  _i2.SeedDataService get seedDataService =>
      (super.noSuchMethod(
            Invocation.getter(#seedDataService),
            returnValue: _FakeSeedDataService_5(
              this,
              Invocation.getter(#seedDataService),
            ),
          )
          as _i2.SeedDataService);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void setSelectedDate(DateTime? date) => super.noSuchMethod(
    Invocation.method(#setSelectedDate, [date]),
    returnValueForMissingStub: null,
  );

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [MaterialsProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockMaterialsProvider extends _i1.Mock implements _i6.MaterialsProvider {
  MockMaterialsProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i7.Material> get allMaterials =>
      (super.noSuchMethod(
            Invocation.getter(#allMaterials),
            returnValue: <_i7.Material>[],
          )
          as List<_i7.Material>);

  @override
  List<_i7.Material> get filteredMaterials =>
      (super.noSuchMethod(
            Invocation.getter(#filteredMaterials),
            returnValue: <_i7.Material>[],
          )
          as List<_i7.Material>);

  @override
  List<_i7.Material> get selectedMaterials =>
      (super.noSuchMethod(
            Invocation.getter(#selectedMaterials),
            returnValue: <_i7.Material>[],
          )
          as List<_i7.Material>);

  @override
  String get searchQuery =>
      (super.noSuchMethod(
            Invocation.getter(#searchQuery),
            returnValue: _i8.dummyValue<String>(
              this,
              Invocation.getter(#searchQuery),
            ),
          )
          as String);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get showOnlyAvailable =>
      (super.noSuchMethod(
            Invocation.getter(#showOnlyAvailable),
            returnValue: false,
          )
          as bool);

  @override
  int get selectedMaterialsCount =>
      (super.noSuchMethod(
            Invocation.getter(#selectedMaterialsCount),
            returnValue: 0,
          )
          as int);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> loadMaterials() =>
      (super.noSuchMethod(
            Invocation.method(#loadMaterials, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> loadAvailableMaterials() =>
      (super.noSuchMethod(
            Invocation.method(#loadAvailableMaterials, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void toggleMaterialSelection(String? materialId) => super.noSuchMethod(
    Invocation.method(#toggleMaterialSelection, [materialId]),
    returnValueForMissingStub: null,
  );

  @override
  void selectAllFilteredMaterials() => super.noSuchMethod(
    Invocation.method(#selectAllFilteredMaterials, []),
    returnValueForMissingStub: null,
  );

  @override
  void clearAllSelections() => super.noSuchMethod(
    Invocation.method(#clearAllSelections, []),
    returnValueForMissingStub: null,
  );

  @override
  void setCategoryFilter(_i7.MaterialCategory? category) => super.noSuchMethod(
    Invocation.method(#setCategoryFilter, [category]),
    returnValueForMissingStub: null,
  );

  @override
  void setSearchQuery(String? query) => super.noSuchMethod(
    Invocation.method(#setSearchQuery, [query]),
    returnValueForMissingStub: null,
  );

  @override
  void toggleShowOnlyAvailable() => super.noSuchMethod(
    Invocation.method(#toggleShowOnlyAvailable, []),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> toggleMaterialAvailability(String? materialId) =>
      (super.noSuchMethod(
            Invocation.method(#toggleMaterialAvailability, [materialId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> addMaterial(_i7.Material? material) =>
      (super.noSuchMethod(
            Invocation.method(#addMaterial, [material]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateMaterial(_i7.Material? material) =>
      (super.noSuchMethod(
            Invocation.method(#updateMaterial, [material]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteMaterial(String? materialId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMaterial, [materialId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<Map<_i7.MaterialCategory, int>> getMaterialsCountByCategory() =>
      (super.noSuchMethod(
            Invocation.method(#getMaterialsCountByCategory, []),
            returnValue: _i4.Future<Map<_i7.MaterialCategory, int>>.value(
              <_i7.MaterialCategory, int>{},
            ),
          )
          as _i4.Future<Map<_i7.MaterialCategory, int>>);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [MealPlansProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockMealPlansProvider extends _i1.Mock implements _i9.MealPlansProvider {
  MockMealPlansProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<DateTime, _i7.MealPlan> get mealPlans =>
      (super.noSuchMethod(
            Invocation.getter(#mealPlans),
            returnValue: <DateTime, _i7.MealPlan>{},
          )
          as Map<DateTime, _i7.MealPlan>);

  @override
  DateTime get selectedDate =>
      (super.noSuchMethod(
            Invocation.getter(#selectedDate),
            returnValue: _FakeDateTime_0(
              this,
              Invocation.getter(#selectedDate),
            ),
          )
          as DateTime);

  @override
  DateTime get focusedDate =>
      (super.noSuchMethod(
            Invocation.getter(#focusedDate),
            returnValue: _FakeDateTime_0(this, Invocation.getter(#focusedDate)),
          )
          as DateTime);

  @override
  _i10.CalendarFormat get calendarFormat =>
      (super.noSuchMethod(
            Invocation.getter(#calendarFormat),
            returnValue: _i10.CalendarFormat.month,
          )
          as _i10.CalendarFormat);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get isGenerating =>
      (super.noSuchMethod(Invocation.getter(#isGenerating), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  bool hasMealPlan(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#hasMealPlan, [date]),
            returnValue: false,
          )
          as bool);

  @override
  _i7.MealPlan? getMealPlan(DateTime? date) =>
      (super.noSuchMethod(Invocation.method(#getMealPlan, [date]))
          as _i7.MealPlan?);

  @override
  _i4.Future<void> loadMealPlansForRange(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#loadMealPlansForRange, [startDate, endDate]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> loadCurrentMonthMealPlans() =>
      (super.noSuchMethod(
            Invocation.method(#loadCurrentMonthMealPlans, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> generateMealPlan(
    List<_i7.Material>? materials, {
    List<_i7.MealType>? includedMealTypes,
    List<String>? dietaryRestrictions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #generateMealPlan,
              [materials],
              {
                #includedMealTypes: includedMealTypes,
                #dietaryRestrictions: dietaryRestrictions,
              },
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> generateWeeklyMealPlans(
    DateTime? startDate,
    List<_i7.Material>? materials, {
    List<_i7.MealType>? includedMealTypes,
    List<String>? dietaryRestrictions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #generateWeeklyMealPlans,
              [startDate, materials],
              {
                #includedMealTypes: includedMealTypes,
                #dietaryRestrictions: dietaryRestrictions,
              },
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> saveMealPlan(_i7.MealPlan? mealPlan) =>
      (super.noSuchMethod(
            Invocation.method(#saveMealPlan, [mealPlan]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateMealPlan(_i7.MealPlan? mealPlan) =>
      (super.noSuchMethod(
            Invocation.method(#updateMealPlan, [mealPlan]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteMealPlan(String? mealPlanId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMealPlan, [mealPlanId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateMealInPlan(_i7.MealType? mealType, _i7.Meal? meal) =>
      (super.noSuchMethod(
            Invocation.method(#updateMealInPlan, [mealType, meal]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void setSelectedDate(DateTime? date) => super.noSuchMethod(
    Invocation.method(#setSelectedDate, [date]),
    returnValueForMissingStub: null,
  );

  @override
  void setFocusedDate(DateTime? date) => super.noSuchMethod(
    Invocation.method(#setFocusedDate, [date]),
    returnValueForMissingStub: null,
  );

  @override
  void setCalendarFormat(_i10.CalendarFormat? format) => super.noSuchMethod(
    Invocation.method(#setCalendarFormat, [format]),
    returnValueForMissingStub: null,
  );

  @override
  List<_i7.MealPlan> getEventsForDay(DateTime? day) =>
      (super.noSuchMethod(
            Invocation.method(#getEventsForDay, [day]),
            returnValue: <_i7.MealPlan>[],
          )
          as List<_i7.MealPlan>);

  @override
  _i4.Future<Map<String, dynamic>> getMealPlanStatistics() =>
      (super.noSuchMethod(
            Invocation.method(#getMealPlanStatistics, []),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
